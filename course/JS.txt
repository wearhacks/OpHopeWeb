------ Introduction -----
So far we have looked at tools that help us create the *static* parts of our page: what it contains and what
it should look like.

JavaScript is the standard language web programmers use (these days at least) to make websites interactive,
add some behavioral elements. Programs written in JavaScript can run on your browser and interact with your
other HTML and CSS components.

For the Money Manager application, we will show you how to build some functionality into the page: after 
completing the tutorial you should be able to save transactions which load every time with the page!


------ About JavaScript -----
Typically JavaScript that runs on your browser works against things it renders: HTML elements and 
CSS rules applied to them. Imagine you had a button like this:

```html
<button id="my-button">Click Me!</button>
```
By itself, the button is useless - it does absolutely nothing.


------ Adding JS -----
Remember how we linked a CSS stylesheet to the content we already had? Linking JavaScript
files is similar in that we add a tag in the <head> section. The tag, however, is <script>:

```html
<head>
    <!-- ... -->
    <script>my-script.js</script>
    <!-- ... -->
</head>
```

Of course, you can have JavaScript code in the HTML file but that's a bad practice unless your 
script is very short.


------ JavaScript 101 -----
In JavaScript we can define and manipulate browser-related entities as objects. Objects are
just containers of **attributes** and **operations** that can be called on them. For example:

```javascript
var person = {
   name: "John",
   last_name: "Smith",
   greet: function() {
       console.log("Hi!");
   }
}
```
With the **var** keyword, you define objects in JavaScript. As in this example, you can put
both attributes (like the first and last name) and functions into an object. While the attribute
definition is obvious, the function might not be as much: When called:

```javascript
person.greet();
```

It outputs a "Hi!" message on the browser's console. You will find your console with these shortcuts:
* Chrome: Ctrl+Shift+J or CMD+Option+J
* Firefox: Ctrl+Shift+K or CMD+Option+K
* On Safari: https://developer.apple.com/library/mac/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/GettingStarted/GettingStarted.html


------ The document object  -----
For our purposes, a particular object of interest is **document**. It is already defined and it is a model 
of the whole HTML page. Recall that it is like a tree with the <html> element being at the top of it all:

document
    <!DOCTYPE html>
    <html>
        <head>...</head>
        <body>...</body>
    </html>

document already has some functions that you can use to get hold of elements within the page. For example,
we had a button (it didn't have the id but we could have added it - recall that an element can have an ID):

<input id="submit" type="button" class="ui primary button" value="Submit">

The JavaScript code to get hold of the button based on its id is:

```javascript
var button = document.getElementById("submit");
```


------ The document object  -----
Next we will bind a custom function to this button's 'onclick' event:

```javascript
var button = document.getElementById("submit");
button.onclick = function () {
    console.log("Hi!");
};
```

What if we want to make a pop-up message appear when the user clicks on the button?
For this we will add a call to the alert() function inside the custom function we just created:

```javascript
var button = document.getElementById("submit");
button.onclick = function () {
    alert("You clicked me!");
};
```

That's it! You just created a button that gives a pop-up message to the user when clicked. 

Try-it-yourself: Check what the code does on an actual page.


------ Grabbing form data -----
Now let's write the logic that will process the form we made previously:

```html
<form name="new_transaction" class="ui form">
    ...
</form>
```

We need to grab data from the form and save it into objects:

To do that we use the forms attribute of the document object:

```javascript
function saveTransaction() {
    var type = document.forms["new_transaction"]["type"].value;
    var description = document.forms["new_transaction"]["description"].value;
    var amount = document.forms["new_transaction"]["amount"].value;
}
```

Let's take a closer look to what is happening here:

1. We call the 'document' object that contains all the elements on our page like before.
2. Then we pick all the <form> elements inside our 'document' and specify the form name. 
   In this case it is "new_transaction". Make sure it matches what you defined while making the HTML form.
3. Next we grab a specific elements, "type" from inside the form and get its value.
4. We do the same for the other 2 fields, the description and the amount.


------ Processing the data ------
The transaction data was grabbed from the form but we need to create an object out of it to process it
properly.

```javascript
function saveTransaction() {
    var type = document.forms["new_transaction"]["type"].value;
    var description = document.forms["new_transaction"]["description"].value;
    var amount = document.forms["new_transaction"]["amount"].value;

    var transaction = {
        type: type,
        description: description,
        amount: amount
    };
}
```


------ Local Storage ------
So far we've managed to grab the data from the user and process it. We need to create a new table entry!
This involves 2 steps: saving the entry locally (so that it can be retrieved when the page is reloaded)
as well as modifying the HTML content so that a row is added to the table element.

The browser's store that holds data needed, for example, to log into websites automatically (without
typing in your password each time) is called "Local Storage".

If you wanted to see what data stored in local storage looks like, it would look something like a 
key-to-value structure:

--------+-----------------------------------------------------------------------------
Key 	| Value
--------+-----------------------------------------------------------------------------
login	| {"username" : "john", "auth_token" : "09usadf340ujasdf9u4320f9asof"}
--------+-----------------------------------------------------------------------------


------ Local Storage Pt.2 ------
Now let's look at how data is saved into Local Storage. This is done using yet-another-object that is 
readily available, localStorage.

// Store
localStorage.setItem("mykey", "some value"); //this will create a new key-value pair in localStorage

// Retrieve
var myvar = localStorage.mykey; // this will load the value stored at "mykey" from localStorage into the variable "myvar"

After the above operation, our localStorage would look something like this:

--------+-----------------------------------------------------------------------------
Key 	| Value
--------+-----------------------------------------------------------------------------
login	| {"username" : "foobar", "auth_token" : "09usadf340ujasdf9u4320f9asof"}
mykey	| "some value"
--------+-----------------------------------------------------------------------------


------ Local Storage Pt.3 ------
We want to be able to store all our data in one entry similiar to the way the value for "login" is stored. 

First we need to check how many (if any) entries are already in the table. This is so that we know where to 
add it in the table.

```javascript
var counter = (!localStorage.counter) ? 0 : Number(localStorage.counter) + 1;
```

Before we go ahead and save it, we have to convert it into a string so that we dont run into problems across 
different browsers.

To do this, you can simply pass the transaction object into a 'stringify' function like so:
	
```javascript
JSON.stringify(transaction);
```

Now let's save it to local storage:

function saveTransaction() {
    ...
    var counter = (!localStorage.counter) ? 0 : Number(localStorage.counter) + 1;

    // save to local storage
    localStorage.setItem(counter, JSON.stringify(transaction));
    localStorage.setItem("counter", counter);
    ...
}

Now, next time you retrieve it, you will be getting the up-to-date value. Similarly,
if you had functionality to remove an entry, you would be setting the counter correspondingly.


------ Adding the HTML element ------
Remember the table which stored the transactions?

```html
<table class="ui celled table">
    <thead>
        <tr>
            <th>Type</th>
            <th>Description</th>
            <th>Amount</th>
        </tr>
    </thead>
    <tbody id="transactions">
    </tbody>
    <tfoot>
        <tr>
            <th>Balance</th>
            <th></th>
        </tr>
    </tfoot>
</table>
```

Notice the <tbody> section that holds the transactions is empty. We can a table row there
(a <tr> element containing <td> elements for each column, if you remember the material from
the HTML course!) using the data we grabbed from the form after pressing the button. For this 
purpose we supply you with an addTableElement function. Here it is:

```javascript
function addTableElement(counter){
    var transaction = JSON.parse(localStorage.getItem(counter));

    // add table element
    // get the table tbody
    var transactions = document.getElementById('transactions');

    // add content to the new element just created
    //create the td elements
    var type_node = document.createElement("td");
    var description_node = document.createElement("td");
    var amount_node = document.createElement("td");

    // append data to the td elements
    type_node.appendChild(document.createTextNode(transaction.type));
    description_node.appendChild(document.createTextNode(transaction.description));
    amount_node.appendChild(document.createTextNode(transaction.amount));

    // append the td elemets to one tr element
    var transaction_node = document.createElement("tr");
    transaction_node.appendChild(type_node);
    transaction_node.appendChild(description_node);
    transaction_node.appendChild(amount_node);
    // append tr to tbody
    transactions.insertBefore(transaction_node, transactions.firstChild);
}
```
Notice that it takes the counter we computed (and stored into localStorage) as an argument. 
Other notable things include:
* Using the createElement function from the document object to create <td> elements
* Using functions on the nodes created to place elements appropriately: appendChild, insertBefore.

Exercise: Add a call the function we provided with the computed counter as an argument. This should do it for
          updating the page content!

------ Updating the total balance ------
As the last functionality chunk, we need to update the balance. We have provided you with a function 
to update the total balance, which is stored in localStorage:

```javascript
function updateBalance(){
    var counter;
    if (!localStorage.counter){
        console.log("No 'counter' value stored in localStorage!");
        return;
    } 

    counter = Number(localStorage.counter);
    var i, transaction, sum = 0;
    for(i = 0; i <= counter; i++){
        transaction = JSON.parse(localStorage.getItem(i));
        sum = (transaction.type === "Expense") ?
            sum - Number(transaction.amount) : 
                sum + Number(transaction.amount);
    }

    document.getElementById("balance").innerHTML = sum;
}
```

A few things to note here are the use of a looping construct (common in programming) that
is used to compute the balance (sum) as well as the use of the innerHTML attribute of the balance
element to set the balance value.

Exercise: Add a call to the function to update the balance. 
          This will also add the balance value to the table.


------ Resetting form inputs ------

Finally, we need to clear the input fields once we are done adding an entry to the table.
It is not a strict requirement but it makes the experience better as you don't have to 
erase the previous input before adding a new one.

// How to clear form inputs:
document.forms["new_transaction"]["type"].value = '';

Exercise: Reset the value of the "description" and "amount" fields:
document.forms["new_transaction"]["description"].value = '';
document.forms["new_transaction"]["amount"].value = '';


------ Closing Remarks ------
Done! Look at you've made and give yourself a pat at the back!

You can download your finished Money Manager app here and play around with it: <download_link>

Don't be afraid to experiment! Have fun!
